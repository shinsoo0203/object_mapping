// Generated by gencpp from file darknet_ros_msgs/ObjectPoint.msg
// DO NOT EDIT!


#ifndef DARKNET_ROS_MSGS_MESSAGE_OBJECTPOINT_H
#define DARKNET_ROS_MSGS_MESSAGE_OBJECTPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace darknet_ros_msgs
{
template <class ContainerAllocator>
struct ObjectPoint_
{
  typedef ObjectPoint_<ContainerAllocator> Type;

  ObjectPoint_()
    : Class()
    , probability(0.0)
    , width(0)
    , height(0)
    , point()  {
    }
  ObjectPoint_(const ContainerAllocator& _alloc)
    : Class(_alloc)
    , probability(0.0)
    , width(0)
    , height(0)
    , point(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Class_type;
  _Class_type Class;

   typedef double _probability_type;
  _probability_type probability;

   typedef int8_t _width_type;
  _width_type width;

   typedef int8_t _height_type;
  _height_type height;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_type;
  _point_type point;





  typedef boost::shared_ptr< ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectPoint_

typedef ::darknet_ros_msgs::ObjectPoint_<std::allocator<void> > ObjectPoint;

typedef boost::shared_ptr< ::darknet_ros_msgs::ObjectPoint > ObjectPointPtr;
typedef boost::shared_ptr< ::darknet_ros_msgs::ObjectPoint const> ObjectPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator1> & lhs, const ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator2> & rhs)
{
  return lhs.Class == rhs.Class &&
    lhs.probability == rhs.probability &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.point == rhs.point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator1> & lhs, const ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace darknet_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "67ee1f8adf25d2c6b869bd19b2901b2c";
  }

  static const char* value(const ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x67ee1f8adf25d2c6ULL;
  static const uint64_t static_value2 = 0xb869bd19b2901b2cULL;
};

template<class ContainerAllocator>
struct DataType< ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "darknet_ros_msgs/ObjectPoint";
  }

  static const char* value(const ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string Class\n"
"float64 probability\n"
"int8 width\n"
"int8 height\n"
"geometry_msgs/Point point\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Class);
      stream.next(m.probability);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::darknet_ros_msgs::ObjectPoint_<ContainerAllocator>& v)
  {
    s << indent << "Class: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Class);
    s << indent << "probability: ";
    Printer<double>::stream(s, indent + "  ", v.probability);
    s << indent << "width: ";
    Printer<int8_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int8_t>::stream(s, indent + "  ", v.height);
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DARKNET_ROS_MSGS_MESSAGE_OBJECTPOINT_H
